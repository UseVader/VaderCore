// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uid              String         @id @default(cuid())
  displayName      String?
  email            String?        @unique
  photoURL         String?
  refreshToken     String?
  providerAccounts Account[]
  createdOn        DateTime       @default(now()) @db.Timestamp(3)
  Command          Command[]
  Script           Script[]
  ExecutionLog     ExecutionLog[]
}

model Account {
  id                   String   @id @default(cuid())
  userId               String
  user                 User     @relation(fields: [userId], references: [uid], onDelete: Cascade)
  provider             String
  providerAccountId    String
  providerRefreshToken String?
  providerAccessToken  String?
  providerScope        String?
  loggedIn             DateTime @default(now()) @db.Timestamp(3)

  @@unique(fields: [provider, providerAccountId], name: "verifyProviderAccount")
}

enum CommandType {
  USER_DEFINED
  PREDEFINED
}

model Command {
  id                  String          @id @default(cuid())
  title               String
  description         String?
  cmd                 String
  type                CommandType     @default(USER_DEFINED)
  createdBy           String?
  User                User?           @relation(fields: [createdBy], references: [uid], onDelete: Cascade)
  isInputRequired     Boolean         @default(false)
  requiresUserWarning Boolean         @default(false) // True for commands that are safe to run but better to warn the user just in case
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  ScriptCommand       ScriptCommand[]
}

model Script {
  id            String          @id @default(cuid())
  name          String
  description   String
  alias         String          @unique
  createdBy     String
  User          User            @relation(fields: [createdBy], references: [uid], onDelete: Cascade)
  revision      Int             @default(0)
  tags          String[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  ScriptCommand ScriptCommand[]
  ExecutionLog  ExecutionLog[]
}

model ScriptCommand {
  id            String          @id @default(cuid())
  scriptId      String
  script        Script          @relation(fields: [scriptId], references: [id], onDelete: Cascade)
  commandId     String
  command       Command         @relation(fields: [commandId], references: [id], onDelete: Cascade)
  inputArgs     String?
  order         Int
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  CommandOutput CommandOutput[]

  @@unique([commandId, scriptId])
}

model CommandOutput {
  id                        String                      @id @default(cuid())
  scriptCommandId           String
  scriptCommand             ScriptCommand               @relation(fields: [scriptCommandId], references: [id])
  output                    String
  isSuccessfulExecution     Boolean
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  ExecutionLogCommandOutput ExecutionLogCommandOutput[]
}

model ExecutionLogCommandOutput {
  id              String        @id @default(cuid())
  executionLogId  String
  ExecutionLog    ExecutionLog  @relation(fields: [executionLogId], references: [id], onDelete: Cascade)
  commandOutputId String
  CommandOutput   CommandOutput @relation(fields: [commandOutputId], references: [id], onDelete: Cascade)
  createdAt       DateTime      @default(now())
}

model ExecutionLog {
  id                        String                      @id @default(cuid())
  metadata                  Json
  scriptId                  String
  script                    Script                      @relation(fields: [scriptId], references: [id], onDelete: Cascade)
  executedBy                String
  User                      User                        @relation(fields: [executedBy], references: [uid], onDelete: Cascade)
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt
  ExecutionLogCommandOutput ExecutionLogCommandOutput[]
}
